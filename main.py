import os
import random
import time

import django
import requests
import telebot
from telebot import types
from amplitude import Amplitude, BaseEvent

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'USDT_Buy_Bot.settings')
django.setup()
from bot.models import Users, Card, AdminMessage, Translations

bot = telebot.TeleBot(os.environ["BOT_API"])
amplitude = Amplitude("API-KEY")


def amplitude_add(from_user, acttion, user_id=False):
    if not user_id:
        user_id = from_user.id
    amplitude.track(
        BaseEvent(
            event_type=acttion,
            user_id=f"{user_id}",
            device_id=f"{user_id}",
            event_properties={
                "username": from_user.username,
                "first_name": from_user.first_name,
            }
        )
    )


def delite_history(user):
    messages_id = user.chat_history[:-1].split(',')
    for i in messages_id:
        try:
            bot.delete_message(user.tg_id, i)
        except Exception:
            pass
    user.chat_history = ''
    user.save()


def get_course():
    url = 'https://min-api.cryptocompare.com/data/price?fsym=USD&tsyms=RUB'
    response = requests.get(url).json()
    return response['RUB']


def button():
    markup = types.InlineKeyboardMarkup()
    chat = types.InlineKeyboardButton('üí¨–ß–∞—Ç', url='https://t.me/easychatP2P')
    buy = types.InlineKeyboardButton('üü¢–ö—É–ø–∏—Ç—å', callback_data='buy')
    balance = types.InlineKeyboardButton('üí∞–ë–∞–ª–∞–Ω—Å', callback_data='balance')
    markup.add(buy)
    markup.add(balance)
    markup.add(chat)
    return markup


def output_step_two(chat_id, user, dollars, error=False):
    if error:
        text = '–ê–¥—Ä–µ—Å –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ—Ç—å USDT-TRC20'
    else:
        text = 'üì¨ –û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –¥–æ–ª–ª–∞—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ—Ç—å USDT-TRC20'
    markup = types.InlineKeyboardMarkup()
    menu = types.InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu')
    markup.add(menu)
    msg = bot.send_message(chat_id=chat_id, text=text)
    user.chat_history += f'{msg.id},'
    user.method = f'adress_validate|{dollars}'
    user.save()


def output_step_one(chat_id, user, error=False):
    balance = str(user.balance).replace('.', ',')
    markup = types.InlineKeyboardMarkup()
    menu = types.InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu')
    markup.add(menu)
    if user.balance > 0:
        if error == 'more':
            text = f'–í—ã –≤–≤–µ–ª–∏ –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ\. –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞ {balance} –¥–æ–ª–ª–∞—Ä–æ–≤'
        elif error == 'invalid':
            text = f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã\. –í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ'
        else:
            text = 'üßÆ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–ª–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏\. \n' \
                   'üèº _–î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è_ –º–µ–∂–¥—É —Ü–µ–ª—ã–º –∏ —á–∞—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É "\.", –∞ –Ω–µ –∑–∞–ø—è—Ç—É—é ","\.'
        output_all = types.InlineKeyboardButton('üì§ –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ', callback_data='output_all')
        markup.add(output_all)
        msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=markup, parse_mode='MarkdownV2')
        user.chat_history += f'{msg.id},'
        user.method = 'dollars_output'
        user.save()
    else:
        input_balance = types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –¥–æ–ª–ª–∞—Ä—ã', callback_data='buy')
        text = '–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ—Ç –¥–æ–ª–ª–∞—Ä–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∏—Ö –º–æ–∂–µ—Ç–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ'
        markup.add(input_balance)
        bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)


def menu_first(chat_id):
    text = 'üíµ –ö—É–ø–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–æ–ª–ª–∞—Ä –≤ –¥–≤–∞ –∫–∞—Å–∞–Ω–∏—è!\n\n' \
           f'‚ÑπÔ∏è –ö—É—Ä—Å –∑–∞ 1 –¥–æ–ª–ª–∞—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {get_course()} ‚ÇΩ'
    markup = button()
    bot.send_message(chat_id, text, reply_markup=markup)


def balance(chat_id, user):
    markup = types.InlineKeyboardMarkup()
    buy = types.InlineKeyboardButton('üü¢ –ö—É–ø–∏—Ç—å –µ—â–µ', callback_data='buy')
    markup.add(buy)
    if user.balance:
        text = f'üí∞–£ –≤–∞—Å {user.balance} —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –¥–æ–ª–ª–∞—Ä–æ–≤'
        output = types.InlineKeyboardButton('üì§ –í—ã–≤–µ—Å—Ç–∏', callback_data='output')
        markup.add(output)
    else:
        text = '–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –ø–æ–∫–∞ –ø—É—Å—Ç–æ. –ü–æ–∫—É–ø–∞–µ–º?'
    menu = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='menu')
    markup.add(menu)
    bot.send_message(chat_id, text, reply_markup=markup)


def menu_two(chat_id, username):
    text = f'üëãüèº –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username} \n\n' \
           f'‚ÑπÔ∏è –ö—É—Ä—Å –∑–∞ 1 –¥–æ–ª–ª–∞—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {get_course()} ‚ÇΩ' \
           f'\n\nüü¢ –ü–æ–∫—É–ø–∞–µ–º?'
    markup = button()
    user = Users.objects.get(tg_id=chat_id)
    output = types.InlineKeyboardButton('üì§–í—ã–≤–µ—Å—Ç–∏', callback_data='output')
    markup.add(output)
    bot.send_message(chat_id, text, reply_markup=markup)


def send_message_to_user(chat_id):
    text = '‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞.\n' \
           '–û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 4 –º–∏–Ω—É—Ç'
    markup = types.InlineKeyboardMarkup()
    supprot = types.InlineKeyboardButton('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/easycryptofounders')
    markup.add(supprot)
    user = Users.objects.get(tg_id=chat_id)
    msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)
    user.chat_history += f'{msg.id},'
    user.save()


def buy_step_three(chat_id, amount, dollars):
    card = random.choice(Card.objects.all())
    str_amount = str(amount).replace('.', ',')
    link = 'https://telegra.ph/Kak-EasyCrypto-obespechivaet-bezopasnost-vashej-sdelki-01-15'
    text = f'‚Ñπ –û–ø–ª–∞—Ç–∏—Ç–µ {str_amount} ‚ÇΩ\n\n' \
           f'üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:` {card.number}` \n\n' \
           f'üè¶ –ë–∞–Ω–∫ {card.bank}\n\n' \
           f'üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å {card.owner}\n\n' \
           f'üîê –ö–∞–∫ –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤? [–£–∑–Ω–∞–π—Ç–µ –∑–∞ 3 –º–∏–Ω—É—Ç—ã]({link})'
    markup = types.InlineKeyboardMarkup()
    supprot = types.InlineKeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/easycryptofounders')
    cansel_deal = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É', callback_data=f'menu')
    send_money = types.InlineKeyboardButton('üü¢ –î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª',
                                            callback_data=f'send_money|{amount}|{dollars}|{card.number}')
    markup.add(send_money)
    markup.add(supprot)
    markup.add(cansel_deal)
    msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=markup, parse_mode='MarkdownV2',
                           disable_web_page_preview=True)
    user = Users.objects.get(tg_id=chat_id)
    user.chat_history += f'{msg.id},'
    user.save()


def buy_step_two(chat_id, dollars):
    course = get_course()
    amount = round(dollars * course, 2)
    text = f'‚Ñπ–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ {dollars} –¥–æ–ª–ª–∞—Ä–æ–≤ –ø–æ –∫—É—Ä—Å—É {course}‚ÇΩ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ.\n' \
           f'‚ùî–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É?'
    markup = types.InlineKeyboardMarkup()
    start = types.InlineKeyboardButton('üü¢ –ù–∞—á–∏–Ω–∞–µ–º!', callback_data=f'start|{amount}|{dollars}')
    menu = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='menu')
    markup.add(start)
    markup.add(menu)
    msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)
    user = Users.objects.get(tg_id=chat_id)
    user.chat_history += f'{msg.id},'
    user.save()


def buy_step_one(chat_id, error=False):
    course = get_course()
    user = Users.objects.get(tg_id=chat_id)
    user.method = 'dollars_input'
    if error:
        text = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –î–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É '.', –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª"
    else:
        text = f'‚Ñπ–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å - {course}‚ÇΩ –∑–∞ –¥–æ–ª–ª–∞—Ä.\n' \
               f'‚ùî–°–∫–æ–ª—å–∫–æ –¥–æ–ª–ª–∞—Ä–æ–≤ –ø–æ–∫—É–ø–∞–µ–º?\n\n' \
               f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–ª–∞—Ä–æ–≤ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —á–∏—Å–ª–æ'
    markup = types.InlineKeyboardMarkup()
    for i in range(1, 4):
        dollar = types.InlineKeyboardButton(f'üîò {10 ** i}', callback_data=f'buy_dollar|{10 ** i}')
        markup.add(dollar)
    menu = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='menu')
    markup.add(menu)
    msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)
    user.chat_history += f'{msg.id},'
    user.save()


def check_user(chat_id, username=''):
    try:
        user = Users.objects.get(tg_id=chat_id)
    except Exception:
        user = Users.objects.create(tg_id=chat_id, username=username)
        menu_first(chat_id)
    else:
        menu_two(chat_id, username)


@bot.message_handler(commands=['start'])
def start(message):
    amplitude_add(message.from_user, 'start')
    username = message.from_user.first_name
    chat_id = message.chat.id
    try:
        user = Users.objects.get(tg_id=chat_id)
        user.method = ''
        user.save()
    except Exception:
        pass
    bot.delete_message(chat_id=chat_id, message_id=message.id)
    check_user(chat_id, username)


@bot.message_handler(commands=['balance'])
def balance_button(message):
    amplitude_add(message.from_user, 'balance')
    chat_id = message.chat.id
    user = Users.objects.get(tg_id=chat_id)
    balance(chat_id, user)


@bot.message_handler(content_types='text')
def input(message):
    chat_id = message.chat.id
    user = Users.objects.get(tg_id=chat_id)
    method = user.method
    if method == 'dollars_input':
        try:
            dollars = float(message.text)
            user.chat_history += f'{message.id},'
            delite_history(user)
            buy_step_two(chat_id=chat_id, dollars=dollars)
        except Exception:
            buy_step_one(chat_id, error=True)
    elif method == 'dollars_output':
        user.chat_history += f'{message.id},'
        user.save()
        delite_history(user)
        try:
            dollars = float(message.text)
            if dollars > user.balance:
                raise TypeError
        except ValueError:
            output_step_one(chat_id=chat_id, user=user, error='invalid')
        except TypeError:
            output_step_one(chat_id=chat_id, user=user, error='more')
        else:
            output_step_two(chat_id=chat_id, user=user, dollars=dollars)
    elif method.split('|')[0] == 'adress_validate':
        user.chat_history += f'{message.id},'
        user.save()
        delite_history(user)
        dollars = float(method.split('|')[1])
        try:
            address = message.text
            url = f"https://apilist.tronscan.org/api/account?address={address}&includeToken=true"
            headers = {"accept": "application/json"}
            response = requests.get(url, headers=headers)
            data = response.json()['trc20token_balances']
        except KeyError:
            output_step_two(chat_id=chat_id, user=user, dollars=dollars, error=True)
        else:
            text = f'üèÅ –î–æ–ª–ª–∞—Ä—ã –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!\n' \
                   f'–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: \n' \
                   f'{dollars} –¥–æ–ª–ª–∞—Ä–æ–≤\n' \
                   f'–ù–∞ –∞–¥—Ä–µ—Å: {address}\n' \
                   f'‚ùî–í—Å–µ –≤–µ—Ä–Ω–æ?'
            markup = types.InlineKeyboardMarkup()
            edit_address = types.InlineKeyboardButton('üì¨ –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å', callback_data=f'edit_address|{dollars}')
            edit_dollars = types.InlineKeyboardButton('üßÆ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data='output')
            cansel_output = types.InlineKeyboardButton('üôÖ‚Äç‚ôÇÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥', callback_data='menu')
            approve_output = types.InlineKeyboardButton('üü¢ –î–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º',
                                                        callback_data=f'approve_output|{dollars}|{address}')
            markup.add(approve_output)
            markup.add(edit_address)
            markup.add(edit_dollars)
            markup.add(cansel_output)
            bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)
    else:
        bot.delete_message(chat_id=chat_id, message_id=message.id)


def delite_admin_messages(unique_number):
    messages = AdminMessage.objects.get(unique_number=unique_number).messages_id.split(',')
    for message in messages:
        admin_id = message.split()[0]
        message_id = message.split()[1]
        try:
            bot.delete_message(chat_id=admin_id, message_id=message_id)
        except Exception:
            pass


def approve_or_cansel_input(chat_id, unique_number, dollars, amount, approved=True):
    delite_admin_messages(unique_number=unique_number)
    markup = types.InlineKeyboardMarkup(row_width=1)
    balance = types.InlineKeyboardButton('üí∞ –ë–∞–ª–∞–Ω—Å', callback_data='balance')
    menu = types.InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu')
    markup.add(balance, menu)
    if approved:
        user = Users.objects.get(tg_id=chat_id)
        user.balance += float(dollars)
        user.save()
        text = f'‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {dollars} –¥–æ–ª–ª–∞—Ä–æ–≤ –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ'
        bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)
    else:
        text = f'–ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount}‚ÇΩ –Ω–∞ –ø–æ–∫—É–ø–∫—É {dollars}'
        bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)


def send_input_to_admin(chat_id, dollars, amount, card, transactions_id):
    unique_number = str(chat_id) + str(time.time())
    admins = Users.objects.filter(is_admin=True)
    text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª {amount}‚ÇΩ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {dollars} –¥–æ–ª–ª–∞—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É –Ω–æ–º–µ—Ä {card}'
    markup = types.InlineKeyboardMarkup()
    approve = types.InlineKeyboardButton('‚úÖ–û–¥–æ–±—Ä–∏—Ç—å',
                                         callback_data=f'approve|{chat_id}|{dollars}|{amount}|{unique_number}|{transactions_id}')
    cansel = types.InlineKeyboardButton('‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                                        callback_data=f'cansel|{chat_id}|{dollars}|{amount}|{unique_number}|{transactions_id}')
    ban = types.InlineKeyboardButton('–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data=f'ban|{chat_id}|{transactions_id}')
    markup.add(approve)
    markup.add(cansel)
    markup.add(ban)
    messages_id = ''
    for admin in admins:
        msg = bot.send_message(chat_id=admin.tg_id, text=text, reply_markup=markup)
        messages_id += f'{admin.tg_id} {msg.id},'
    AdminMessage.objects.create(
        unique_number=unique_number,
        messages_id=messages_id[:-1]
    )


def ban_message(chat_id):
    markup = types.InlineKeyboardMarkup()
    supprot = types.InlineKeyboardButton('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', url='https://t.me/easycryptofounders')
    markup.add(supprot)
    text = f'–í—ã –±–∞–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ —Å–ø–∞–º. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–µ, —Å–æ–æ–±—â–∏–≤ –∏–º –≤–∞—à ID - {chat_id}'
    bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)


def send_output_to_user(chat_id, dollars, adress):
    text = '–ì–æ—Ç–æ–≤–æ!\n' \
           f'–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {dollars} –¥–æ–ª–ª–∞—Ä–æ–≤\n' \
           f'–ê–¥—Ä–µ—Å: {adress}'
    markup = button()
    bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)


def send_output_to_admin(chat_id, dollars, adress, transactions_id):
    unique_number = str(chat_id) + str(time.time())
    dollars1 = str(round(dollars * 0.98, 2)).replace('.', ',')
    admins = Users.objects.filter(is_admin=True)
    text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ {dollars1} –¥–æ–ª–ª–∞—Ä–æ–≤ –Ω–∞ –∞–¥—Ä–µ—Å `{adress}`'
    markup = types.InlineKeyboardMarkup()
    approve = types.InlineKeyboardButton('‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É',
                                         callback_data=f'out_approve|{chat_id}|{round(dollars * 0.98, 2)}|{unique_number}|{transactions_id}')
    ban = types.InlineKeyboardButton('–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data=f'ban|{chat_id}|{transactions_id}')
    markup.add(approve)
    markup.add(ban)
    messages_id = ''
    for admin in admins:
        msg = bot.send_message(chat_id=admin.tg_id, text=text, reply_markup=markup, parse_mode='MarkdownV2')
        messages_id += f'{admin.tg_id} {msg.id},'
    AdminMessage.objects.create(
        unique_number=unique_number,
        messages_id=messages_id[:-1]
    )


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    username = call.from_user.first_name
    message_id = call.message.id
    chat_id = call.message.chat.id
    user = Users.objects.get(tg_id=call.from_user.id)
    user.method = ''
    if not user.username:
        user.username = call.from_user.username
        user.save()
    if call.message:
        data = call.data
        user.chat_history += f'{message_id},'
        user.save()
        delite_history(user)
        if user.is_ban:
            ban_message(chat_id)
        elif data == 'menu':
            check_user(chat_id, username)

        elif data == 'balance':
            amplitude_add(call.from_user, 'balance')
            balance(chat_id, user)

        elif data == 'buy':
            amplitude_add(call.from_user, 'buy_usd')
            buy_step_one(chat_id=chat_id)

        elif data.split('|')[0] == 'buy_dollar':
            dollars = float(data.split('|')[1])
            buy_step_two(chat_id=chat_id, dollars=dollars)

        elif data.split('|')[0] == 'start':
            amount = float(data.split('|')[1])
            dollars = float(data.split('|')[2])
            buy_step_three(chat_id=chat_id, dollars=dollars, amount=amount)

        elif data.split('|')[0] == 'send_money':
            amount = float(data.split('|')[1])
            dollars = float(data.split('|')[2])
            number_card = data.split('|')[3]
            transactions = Translations.create(
                type='–ü–æ–∫—É–ø–∫–∞',
                number_dollars=dollars
            )
            send_input_to_admin(chat_id=chat_id, dollars=dollars, amount=amount, card=number_card, transactions_id=transactions.id)
            send_message_to_user(chat_id=chat_id)

        elif data.split('|')[0] == 'cansel':
            user_chat_id = data.split('|')[1]
            dollars = float(data.split('|')[2])
            amplitude_add(call.from_user, f'Cansel replenishment balance {dollars}$', user_chat_id)
            amount = float(data.split('|')[3])
            unique_number = data.split('|')[4]
            transaction_id = data.split('|')[5]
            transaction = Translations.objects.get(id=transaction_id)
            transaction.status = '–û—Ç–∫–∞–∑–∞–Ω–æ'
            transaction.save()
            approve_or_cansel_input(chat_id=user_chat_id, dollars=dollars, amount=amount, unique_number=unique_number,
                                    approved=False)
        elif data == 'output':
            amplitude_add(call.from_user, f'Output balance')
            output_step_one(chat_id=chat_id, user=user)

        elif data == 'output_all':
            output_step_two(chat_id=chat_id, user=user, dollars=user.balance)

        elif data.split('|')[0] == 'approve':
            user_chat_id = data.split('|')[1]
            dollars = float(data.split('|')[2])
            amplitude_add(call.from_user, f'Approve replenishment balance {dollars}$', user_chat_id)
            amount = float(data.split('|')[3])
            unique_number = data.split('|')[4]
            transaction_id = data.split('|')[5]
            transaction = Translations.objects.get(id=transaction_id)
            transaction.status = '–û–¥–æ–±—Ä–µ–Ω–æ'
            transaction.save()
            approve_or_cansel_input(chat_id=user_chat_id, dollars=dollars, amount=amount, unique_number=unique_number)

        elif data.split('|')[0] == 'edit_address':
            dollars = float(data.split('|')[1])
            output_step_two(chat_id=chat_id, user=user, dollars=dollars)

        elif data.split('|')[0] == 'approve_output':
            dollars = float(data.split('|')[1])
            adress = data.split('|')[2]
            user.balance -= dollars
            user.freeze_balance += dollars
            user.save()
            transactions = Translations.create(
                type='–í—ã–≤–æ–¥',
                number_dollars=dollars
            )
            send_output_to_admin(chat_id=chat_id, dollars=dollars, adress=adress, transactions_id=transactions)
            send_output_to_user(chat_id=chat_id, adress=adress, dollars=dollars)

        elif data.split('|')[0] == 'out_approve':
            user_chat_id = data.split('|')[1]
            dollars = float(data.split('|')[2])
            amplitude_add(call.from_user, f'Approve output balance {dollars}$', user_chat_id)
            unique_number = data.split('|')[3]
            transaction_id = data.split('|')[4]
            transaction = Translations.objects.get(id=transaction_id)
            transaction.status = '–û–¥–æ–±—Ä–µ–Ω–æ'
            transaction.save()
            usr = Users.objects.get(tg_id=user_chat_id)
            usr.freeze_balance -= dollars
            usr.save()
            delite_admin_messages(unique_number=unique_number)

        elif data.split('|')[0] == 'ban':
            transaction_id = data.split('|')[2]
            transaction = Translations.objects.get(id=transaction_id)
            transaction.status = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏'
            transaction.save()
            user_id = data.split('|')[1]
            usr = Users.objects.get(tg_id=user_id)
            usr.is_ban = True
            usr.save()
            ban_message(chat_id=user_id)

        else:
            check_user(chat_id)


bot.polling(none_stop=True)
